generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  // OWNER
  // COLLABORATOR
  // VIEWER
  ADMIN

}

enum SubscriptionTier {
  FREE
  GOLD
  PLATINUM
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  email         String         @unique
  name          String?
  image         String?
  password      String
  projects      Project[]
  subscriptions SubscriptionTier @default(FREE)
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  Collaborator  Collaborator[]

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Project {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  ownerId       String         @db.ObjectId
  owner         User           @relation(fields: [ownerId], references: [id])
  collaborators Collaborator[]
  shareableLink ShareableLink?
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Collaborator {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  projectId String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])
  role      Role
}

model ShareableLink {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId String   @unique @db.ObjectId
  project   Project  @relation(fields: [projectId], references: [id])
  link      String
  expiry    DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Subscription {
//   id        String           @id @default(auto()) @map("_id") @db.ObjectId
//   userId    String           @db.ObjectId
//   user      User             @relation(fields: [userId], references: [id])
//   status    String
//   tier      SubscriptionTier
//   createdAt DateTime         @default(now())
//   updatedAt DateTime         @updatedAt
// }
